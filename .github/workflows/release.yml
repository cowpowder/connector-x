name: release


on: 
  push:
    branches:
      - main

jobs:
  linux-aarch:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10", "3.11"] 

    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/arm64/v8 \
            --build-arg PYTHON_VERSION=${{ matrix.python-version }}  \
            -f Dockerfile.aarch64 \
            -t connectorx-python-aarch64:latest \
            --load .

      - name: Extract wheel
        run: |
          docker run --name temp connectorx-python-aarch64:latest &
          sleep 10

          WHL_FILENAME=$(docker exec temp ls /workspace/connector-x/connectorx-python/target/wheels)
          docker cp temp:/workspace/connector-x/connectorx-python/target/wheels/$WHL_FILENAME .

          ls -la .

      - name: Remove container
        run: |
          docker stop temp
          docker rm temp

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-artifacts
          path: ./*.whl 

  verify:
    runs-on: ubuntu-latest
    needs: [linux-aarch]
    strategy:
      matrix:
        python-version: ["3.10", "3.11"] 

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python-version }}'

      - uses: actions/download-artifact@v4
        with:
          name: "${{ matrix.os }}-${{ matrix.python-version }}"

      - run: |
          ls -ltRa
          pip install *.whl
          python -c "import connectorx"

  # upload:
  #   runs-on: ubuntu-latest
  #   needs: [verify]
  #   steps:
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4

  #     - name: Setup environment
  #       run: |
  #         tree .
  #         echo "/home/runner/.local/bin" >> $GITHUB_PATH

  #     - name: Install Twine
  #       run: pip install twine

  #     - name: Upload to PyPI site
  #       if: github.ref == 'refs/heads/release'
  #       env:
  #         PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
  #       run: |
  #         for file in $(ls **/*)
  #         do
  #           twine upload --non-interactive -u __token__ -p $PYPI_TOKEN $file || continue
  #         done

  #     - name: Upload to PyPI test site
  #       if: github.ref == 'refs/heads/prerelease'
  #       env:
  #         PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
  #       run: |
  #         for file in $(ls **/*)
  #         do
  #           twine upload --non-interactive --repository-url https://test.pypi.org/legacy/ -u __token__ -p $PYPI_TEST_TOKEN $file --verbose || continue
  #         done