name: release

on:
  push:

jobs:
  linux-aarch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python-version }}'

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          target: aarch64-unknown-linux-gnu
          default: true
          
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
  
      - uses: extractions/setup-just@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: Gr1N/setup-poetry@v9

      - name: Setup project
        run: |
          just bootstrap-python
      - uses: PyO3/maturin-action@v1
        with:
          manylinux: 2_28
          target: aarch64
          args: -m connectorx-python/Cargo.toml -i python${{ matrix.python-version }} --release --features integrated-auth-gssapi
          before-script-linux: |
              apt-get update -y
              apt-get install -y libssl-dev openssl pkg-config libkrb5-dev gcc-multilib
        env:
          SQLITE3_STATIC: 1

      - name: Copy j4rs dependencies into dist
        run: |
          cp -rf connectorx-python/target/release/jassets connectorx-python/connectorx/dependencies
      # rebuild the wheel to incorporate j4rs dependencies
      - uses: PyO3/maturin-action@v1
        with:
          manylinux: 2_28
          target: aarch64
          args: -m connectorx-python/Cargo.toml -i python${{ matrix.python-version }} --release --features integrated-auth-gssapi
          before-script-linux: |
              apt-get update -y
              apt-get install -y libssl-dev openssl pkg-config libkrb5-dev gcc-multilib
        env:
          SQLITE3_STATIC: 1

      - uses: actions/upload-artifact@v4
        with:
          name: "ubuntu-arm-latest-${{ matrix.python-version }}"
          path: connectorx-python/target/wheels/*.whl
  
  verify:
    runs-on: ubuntu-latest
    needs: [linux-aarch]
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python-version }}'

      - uses: actions/download-artifact@v4
        with:
          name: "${{ matrix.os }}-${{ matrix.python-version }}"

      - run: |
          pip install *.whl
          python -c "import connectorx"

  # upload:
  #   runs-on: ubuntu-latest
  #   needs: [verify]
  #   steps:
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4

  #     - name: Setup environment
  #       run: |
  #         tree .
  #         echo "/home/runner/.local/bin" >> $GITHUB_PATH

  #     - name: Install Twine
  #       run: pip install twine

  #     - name: Upload to PyPI site
  #       if: github.ref == 'refs/heads/release'
  #       env:
  #         PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
  #       run: |
  #         for file in $(ls **/*)
  #         do
  #           twine upload --non-interactive -u __token__ -p $PYPI_TOKEN $file || continue
  #         done

  #     - name: Upload to PyPI test site
  #       if: github.ref == 'refs/heads/prerelease'
  #       env:
  #         PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
  #       run: |
  #         for file in $(ls **/*)
  #         do
  #           twine upload --non-interactive --repository-url https://test.pypi.org/legacy/ -u __token__ -p $PYPI_TEST_TOKEN $file --verbose || continue
  #         done